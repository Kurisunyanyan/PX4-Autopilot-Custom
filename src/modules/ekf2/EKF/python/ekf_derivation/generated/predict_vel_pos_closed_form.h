// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: predict_vel_pos_closed_form
 *
 * Args:
 *     state: Matrix24_1
 *     d_vel: Matrix31
 *     d_vel_dt: Scalar
 *     d_ang: Matrix31
 *     d_ang_dt: Scalar
 *     g: Scalar
 *
 * Outputs:
 *     v_new: Matrix31
 *     p_new: Matrix31
 */
template <typename Scalar>
void PredictVelPosClosedForm(const matrix::Matrix<Scalar, 24, 1>& state,
                             const matrix::Matrix<Scalar, 3, 1>& d_vel, const Scalar d_vel_dt,
                             const matrix::Matrix<Scalar, 3, 1>& d_ang, const Scalar d_ang_dt,
                             const Scalar g, matrix::Matrix<Scalar, 3, 1>* const v_new = nullptr,
                             matrix::Matrix<Scalar, 3, 1>* const p_new = nullptr) {
  // Total ops: 162

  // Input arrays

  // Intermediate terms (57)
  const Scalar _tmp0 = -2 * std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp1 = 1 - 2 * std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = std::pow(d_ang(1, 0), Scalar(2));
  const Scalar _tmp4 = -_tmp3;
  const Scalar _tmp5 = std::pow(d_ang(2, 0), Scalar(2));
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 = d_ang(0, 0) * d_vel(2, 0);
  const Scalar _tmp8 = d_ang(0, 0) * d_vel(1, 0);
  const Scalar _tmp9 = _tmp7 * d_ang(2, 0) + _tmp8 * d_ang(1, 0) + d_vel(0, 0) * (_tmp4 + _tmp6);
  const Scalar _tmp10 = std::pow(d_ang(0, 0), Scalar(2));
  const Scalar _tmp11 = std::pow(d_ang_dt, Scalar(-2));
  const Scalar _tmp12 = _tmp10 * _tmp11 + _tmp11 * _tmp3 + _tmp11 * _tmp5;
  const Scalar _tmp13 = std::sqrt(_tmp12);
  const Scalar _tmp14 = std::pow(_tmp12, Scalar(Scalar(-1.5))) * (_tmp13 - std::sin(_tmp13));
  const Scalar _tmp15 = d_ang(2, 0) * d_vel(1, 0);
  const Scalar _tmp16 = d_ang(1, 0) * d_vel(2, 0);
  const Scalar _tmp17 = -_tmp15 + _tmp16;
  const Scalar _tmp18 = std::pow(_tmp12, Scalar(Scalar(1.0)));
  const Scalar _tmp19 = std::cos(_tmp13);
  const Scalar _tmp20 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp21 = (-_tmp19 - _tmp20 + 1) / _tmp18;
  const Scalar _tmp22 = _tmp14 * _tmp9 + _tmp17 * _tmp21 + d_vel(0, 0);
  const Scalar _tmp23 = 2 * state(2, 0);
  const Scalar _tmp24 = _tmp23 * state(0, 0);
  const Scalar _tmp25 = 2 * state(1, 0) * state(3, 0);
  const Scalar _tmp26 = _tmp24 + _tmp25;
  const Scalar _tmp27 = d_ang(1, 0) * d_vel(0, 0);
  const Scalar _tmp28 = -_tmp27 + _tmp8;
  const Scalar _tmp29 = -_tmp10;
  const Scalar _tmp30 = d_ang(2, 0) * d_vel(0, 0);
  const Scalar _tmp31 =
      _tmp15 * d_ang(1, 0) + _tmp30 * d_ang(0, 0) + d_vel(2, 0) * (_tmp29 + _tmp4);
  const Scalar _tmp32 = _tmp14 * _tmp31 + _tmp21 * _tmp28 + d_vel(2, 0);
  const Scalar _tmp33 = 2 * state(0, 0);
  const Scalar _tmp34 = _tmp33 * state(3, 0);
  const Scalar _tmp35 = _tmp23 * state(1, 0);
  const Scalar _tmp36 = -_tmp34 + _tmp35;
  const Scalar _tmp37 = _tmp30 - _tmp7;
  const Scalar _tmp38 =
      _tmp16 * d_ang(2, 0) + _tmp27 * d_ang(0, 0) + d_vel(1, 0) * (_tmp29 + _tmp6);
  const Scalar _tmp39 = _tmp14 * _tmp38 + _tmp21 * _tmp37 + d_vel(1, 0);
  const Scalar _tmp40 = _tmp34 + _tmp35;
  const Scalar _tmp41 = _tmp23 * state(3, 0);
  const Scalar _tmp42 = _tmp33 * state(1, 0);
  const Scalar _tmp43 = _tmp41 - _tmp42;
  const Scalar _tmp44 = -2 * std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp45 = _tmp0 + _tmp44 + 1;
  const Scalar _tmp46 = -_tmp24 + _tmp25;
  const Scalar _tmp47 = _tmp1 + _tmp44;
  const Scalar _tmp48 = _tmp41 + _tmp42;
  const Scalar _tmp49 = d_vel_dt * g + state(6, 0);
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * d_vel_dt;
  const Scalar _tmp51 = std::pow(_tmp12, Scalar(Scalar(2.0)));
  const Scalar _tmp52 = d_vel_dt * (_tmp19 + _tmp20 - Scalar(1) / Scalar(24) * _tmp51 - 1) / _tmp51;
  const Scalar _tmp53 = _tmp14 * d_vel_dt;
  const Scalar _tmp54 = _tmp28 * _tmp53 + _tmp31 * _tmp52 + _tmp50 * d_vel(2, 0);
  const Scalar _tmp55 = _tmp17 * _tmp53 + _tmp50 * d_vel(0, 0) + _tmp52 * _tmp9;
  const Scalar _tmp56 = _tmp37 * _tmp53 + _tmp38 * _tmp52 + _tmp50 * d_vel(1, 0);

  // Output terms (2)
  if (v_new != nullptr) {
    matrix::Matrix<Scalar, 3, 1>& _v_new = (*v_new);

    _v_new(0, 0) = _tmp2 * _tmp22 + _tmp26 * _tmp32 + _tmp36 * _tmp39 + state(4, 0);
    _v_new(1, 0) = _tmp22 * _tmp40 + _tmp32 * _tmp43 + _tmp39 * _tmp45 + state(5, 0);
    _v_new(2, 0) = _tmp22 * _tmp46 + _tmp32 * _tmp47 + _tmp39 * _tmp48 + _tmp49;
  }

  if (p_new != nullptr) {
    matrix::Matrix<Scalar, 3, 1>& _p_new = (*p_new);

    _p_new(0, 0) =
        _tmp2 * _tmp55 + _tmp26 * _tmp54 + _tmp36 * _tmp56 + d_vel_dt * state(4, 0) + state(7, 0);
    _p_new(1, 0) =
        _tmp40 * _tmp55 + _tmp43 * _tmp54 + _tmp45 * _tmp56 + d_vel_dt * state(5, 0) + state(8, 0);
    _p_new(2, 0) = _tmp46 * _tmp55 + _tmp47 * _tmp54 + _tmp48 * _tmp56 + _tmp49 * d_vel_dt -
                   Scalar(1) / Scalar(2) * std::pow(d_vel_dt, Scalar(2)) * g + state(9, 0);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
